@using Pathfinder.Logic.Algorithms
@using System.Numerics
@using Pathfinder.Model
<CanvasGrid @ref="_canvasGrid"/>

@code {
    private CanvasGrid _canvasGrid;
    private CancellationTokenSource? _cancellationTokenSource;

    public void Run()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();

        bool[][] walls = new bool[(int)_canvasGrid.Size.X][];
        Vector2 start = new Vector2(0, 0);
        Vector2 end = new Vector2(10, 10);

        for (int i = 0; i < walls.Length; i++)
        {
            walls[i] = new bool[(int)_canvasGrid.Size.Y];
            for (int j = 0; j < walls[i].Length; j++)
            {
                if (!_canvasGrid.Tiles.ContainsKey(new Vector2(i, j)))
                {
                    Console.WriteLine($"Tile {i},{j} not found");
                    continue;
                }

                GridTile tile = _canvasGrid.Tiles[new Vector2(i, j)];
                walls[i][j] = tile.Type == TileType.WALL;
                
                if(tile.Type == TileType.START)
                {
                    start = new Vector2(i, j);
                }
                else if (tile.Type == TileType.END)
                {
                    end = new Vector2(i, j);
                }
            }
        }

        AStarAlgorithm aStar = new AStarAlgorithm((int)_canvasGrid.Size.X,(int)_canvasGrid.Size.Y,walls);

        aStar.TileVisited += (s, e) =>
        {
            GridTile tile = _canvasGrid.Tiles[new Vector2(e.X, e.Y)];
            if (tile.Type != TileType.PATH && tile.Type != TileType.WALL)
                tile.Type = TileType.VISITED;
        };

        aStar.TileSelected += (s, e) =>
        {
            GridTile tile = _canvasGrid.Tiles[new Vector2(e.X, e.Y)];
            if (tile.Type != TileType.START && tile.Type != TileType.END)
                tile.Type = TileType.PATH;
        };

        Task.Run(() => aStar.Execute((int)start.X, (int)start.Y,(int)end.X,(int)end.Y,_cancellationTokenSource.Token));
    }
}
