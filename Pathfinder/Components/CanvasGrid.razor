@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Pathfinder.Logic.Tools
@using Pathfinder.Logic.Algorithms.MazeGen
@using Pathfinder.Model
@using Pathfinder.Model.UI
@using Pathfinder.Services
@using System.Numerics
@using System.Globalization

@inject MeasurementService MeasurementService
@inject IJSRuntime JSRuntime

<div @ref="div" style="position: relative; width: 100%; height: 100%;" @onmousemove="@OnMouseMove" @onmousedown="@(async (e) => {mouseDown = true; await OnMouseMove(e);})" @onmouseup="@(() => mouseDown = false)" @onmouseleave="@(() => mouseDown = false)">
    <BECanvas Width="@((int)maxSize.X * 32)" Height="@((int)maxSize.Y * 32)" @ref="_canvasReference"></BECanvas>
</div>

@code {
    /// <summary>
    /// Dictionary to store the grid tiles with their positions as keys.
    /// </summary>
    public Dictionary<Vector2, GridTile> Tiles = new Dictionary<Vector2, GridTile>();

    /// <summary>
    /// Represents the size of the grid.
    /// </summary>
    public Vector2 Size = Vector2.Zero;

    private Canvas2DContext _context;
    private BoundingClientRect clientRect = new BoundingClientRect() { Width = 100, Height = 100 };
    private ElementReference div;

    private Vector4 GridGray = new Vector4(128, 128, 128, 0.5f);

    private Vector2? HoveredTile;
    private bool mouseDown = false;
    private bool resized = false;
    private int playingAnimations = 0;
    private Vector2 maxSize = Vector2.Zero;

    private Stack<Task> drawStack = new Stack<Task>();
    private bool isDrawing = false;
    private int drawCount = 0;

    private CancellationTokenSource animationCancellationToken = new CancellationTokenSource();

    protected BECanvasComponent _canvasReference;

    /// <summary>
    /// Clears the grid and reinitializes the canvas.
    /// </summary>
    public async Task Clear()
    {
        Tiles.Clear();
        await InitializeCanvas();
        await Draw();
    }

    /// <summary>
    /// Sets the type of a tile at a given position.
    /// </summary>
    /// <param name="position">The position of the tile.</param>
    /// <param name="type">The type to set for the tile.</param>
    public async Task SetTile(Vector2 position, TileType type)
    {
        if (Tiles.TryGetValue(position, out var tile))
        {
            tile.Type = type;
            await RedrawTile(tile);
        }
    }

    /// <summary>
    /// Generates a maze using Kruskal's algorithm and sets the tiles accordingly.
    /// </summary>
    public async Task CreateMaze()
    {
        var kruskalMazeGenerator = new KruskalMazeGenerator();
        var maze = kruskalMazeGenerator.Generate((int)Size.X, (int)Size.Y);

        var tasks = new List<Task>();
        for (int x = 0; x < maze.Width; x++)
        {
            for (int y = 0; y < maze.Height; y++)
            {
                bool isWall = maze.Blocks[x, y];
                tasks.Add(SetTile(new Vector2(x, y), isWall ? TileType.WALL : TileType.EMPTY));
            }
        }
        await Task.WhenAll(tasks);
    }

    /// <summary>
    /// Clears the visualization by resetting visited and path tiles to empty.
    /// </summary>
    public async Task ClearVisualization()
    {
        var tasks = new List<Task>();
        foreach (var tile in Tiles.Values)
        {
            if (tile.Type == TileType.VISITED || tile.Type == TileType.PATH)
            {
                tile.Type = TileType.EMPTY;
                tasks.Add(RedrawTile(tile));
            }
        }
        await Task.WhenAll(tasks);
    }

    private async Task InitializeCanvas()
    {
        clientRect = await MeasurementService.GetBoundingClientRect(div);
        Size = new Vector2((int)(clientRect.Width / 32), (int)(clientRect.Height / 32));
        maxSize = Size;
        StateHasChanged();

        this._context = await this._canvasReference.CreateCanvas2DAsync();

        //Console.WriteLine(GetColor(Constants.COLOR_PATH));

        // await _context.SetFillStyleAsync(GetColor(Constants.COLOR_PATH));
        // await _context.FillRectAsync(0, 0, clientRect.Width, clientRect.Height);

        for (int x = 0; x < clientRect.Width; x += 32)
        {
            for (int y = 0; y < clientRect.Height; y += 32)
            {
                Vector2 position = new Vector2(x, y) / 32f;
                GridTile tile = Tiles?.GetValueOrDefault(position) ?? new GridTile(position);

                tile.OnTileChanged += async (s, e) => await OnRedrawTile(e, e);

                Tiles?.Add(position, tile);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Initializing Canvas");

            await JSRuntime.InvokeVoidAsync("window.registerViewportChangeCallback", DotNetObjectReference.Create(this));
            await InitializeCanvas();
        }
        if (resized || firstRender)
        {
            await Draw();
            resized = false;
        }
    }

    [JSInvokable]
    public async void OnResize(int width, int height)
    {
        clientRect = await MeasurementService.GetBoundingClientRect(div);
        Size = new Vector2((int)(clientRect.Width / 32), (int)(clientRect.Height / 32));

        if (Size.X > maxSize.X || Size.Y > maxSize.Y)
        {
            maxSize = new Vector2(MathF.Max(Size.X, maxSize.X), MathF.Max(Size.Y, maxSize.Y));

            resized = true;
            StateHasChanged();
        }

        Console.WriteLine($"Resized to: {clientRect.Width}, {clientRect.Height}");
    }

    private async Task StopAllAnimations()
    {
        animationCancellationToken.Cancel();
        await Task.Delay(20);
        animationCancellationToken = new CancellationTokenSource();
    }

    private async Task Draw()
    {
        await StopAllAnimations();
        await _context.ClearRectAsync(0, 0, clientRect.Width, clientRect.Height);
        await DrawGrid();

        var tasks = new List<Task>();
        for (int x = 0; x < Size.X; x++)
        {
            for (int y = 0; y < Size.Y; y++)
            {
                Vector2 key = new Vector2(x, y);
                if (Tiles.TryGetValue(key, out var tile) && tile.Type != TileType.EMPTY)
                {
                    tasks.Add(RedrawTile(tile));
                }
            }
        }
        await Task.WhenAll(tasks);
    }

    private async Task DrawGrid()
    {
        Console.WriteLine("Drawing Grid");
        await _context.SetStrokeStyleAsync(GetColor(GridGray));

        var tasks = new List<Task>();
        for (int i = 0; i < clientRect.Width; i += 32)
        {
            tasks.Add(DrawGridLine(i, 0, i, (int)clientRect.Height));
        }
        for (int i = 0; i < clientRect.Height; i += 32)
        {
            tasks.Add(DrawGridLine(0, i, (int)clientRect.Width, i));
        }
        await Task.WhenAll(tasks);
    }

    private async Task DrawGridLine(int x1, int y1, int x2, int y2)
    {
        await _context.BeginPathAsync();
        await _context.MoveToAsync(x1, y1);
        await _context.LineToAsync(x2, y2);
        await _context.StrokeAsync();
    }

    private async Task DrawHoveredTile()
    {
        //Console.WriteLine($"Drawing Hovered Tile: {HoveredTile}");
        if (HoveredTile.HasValue)
        {
            // Console.WriteLine("Fill");  
            drawStack.Push(this._context.SetFillStyleAsync(GetColor(GridGray)));
            // Console.WriteLine("Rect");
            drawStack.Push(this._context.FillRectAsync(HoveredTile.Value.X * 32, HoveredTile.Value.Y * 32, 32, 32));

            await UpdateGridState();
        }
        //Console.WriteLine("Done Drawing Hovered Tile");
    }

    private async Task DrawEmptyTile(Vector2 tile)
    {
        //Console.WriteLine($"Drawing Empty Tile: {tile}");
        if (!Tiles.ContainsKey(tile))
            return;

        Vector4 c = Tiles[tile].GetColor();
        Vector3 gridRGB = new Vector3(GridGray.X, GridGray.Y, GridGray.Z);

        if (tile == HoveredTile)
            return;

        for (float f = 0; f <= 0.5f; f += 0.05f)
        {
            if (animationCancellationToken.Token.IsCancellationRequested)
            {
                break;
            }

            //Redraw the tile with a lower alpha value
            float a = (0.5f - f);
            if (c.W == 0)
            {
                drawStack.Push( this._context.ClearRectAsync(tile.X * 32, tile.Y * 32, 32, 32));
            }
            else
            {
                drawStack.Push( this._context.SetFillStyleAsync(GetColor(c)));
                drawStack.Push(this._context.FillRectAsync(tile.X * 32, tile.Y * 32, 32, 32));
            }

            drawStack.Push( this._context.SetFillStyleAsync(GetColor(gridRGB, a)));
            drawStack.Push(this._context.FillRectAsync(tile.X * 32, tile.Y * 32, 32, 32));

            drawStack.Push(this._context.SetStrokeStyleAsync(GetColor(GridGray)));
            drawStack.Push(this._context.StrokeRectAsync(tile.X * 32, tile.Y * 32, 32, 32));

            await UpdateGridState();

            await Task.Delay(10);
        }

        c = Tiles[tile].GetColor();


        //Clear the tile
        await RedrawTile(Tiles[tile]);
    }

    private async Task HandleHoverHighlight(MouseEventArgs e)
    {
        Vector2? previous = HoveredTile;
        HoveredTile = new Vector2((int)(e.OffsetX / 32), (int)(e.OffsetY / 32));

        if (previous.HasValue)
            await DrawEmptyTile(previous.Value);

        await DrawHoveredTile();

        //await UpdateGridState();
    }

    private void HandleTool()
    {
        if (HoveredTile.HasValue && Tiles.ContainsKey(HoveredTile.Value) && mouseDown)
        {
            Toolbox.UseTool(Tiles[HoveredTile.Value]);
        }
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        //Console.WriteLine($"Mouse Over: {e.OffsetX}, {e.OffsetY}");
        await HandleHoverHighlight(e);

        HandleTool();
    }

    private async Task OnRedrawTile(object sender, GridTile e)
    {
        await RedrawTile(e);
    }

    private async Task RedrawTile(GridTile tile)
    {
        //Console.WriteLine($"Redrawing Tile: {tile}");
        if(tile.Type == TileType.PATH && playingAnimations > 0){
            drawStack.Push(StopAllAnimations());
        }

        drawStack.Push(ClearTile(tile.Position));

        Vector4 c = tile.GetColor();

        if (c.W == 0)
        {
            drawStack.Push(this._context.ClearRectAsync(tile.Position.X * 32, tile.Position.Y * 32, 32, 32));
        }
        else
        {
            //c = new Vector4(Random.Shared.Next(0, 255), Random.Shared.Next(0, 255), Random.Shared.Next(0, 255), 1);
            if (tile.Type == TileType.VISITED)
            {
                await PlayTileAnimation(TileAnimation.VisitedAnimation, tile.Position);
            }
            else
            {
                drawStack.Push(this._context.SetFillStyleAsync(GetColor(new Vector3(c.X, c.Y, c.Z), c.W)));
                drawStack.Push(this._context.FillRectAsync(tile.Position.X * 32, tile.Position.Y * 32, 32, 32));
            }
        }

        // Console.WriteLine($"stroke");
        drawStack.Push(this._context.SetStrokeStyleAsync(GetColor(GridGray)));
        // Console.WriteLine($"rect");
        drawStack.Push(this._context.StrokeRectAsync(tile.Position.X * 32, tile.Position.Y * 32, 32, 32));

        await UpdateGridState();
    }

    private async Task ClearTile(Vector2 tile)
    {
        drawStack.Push(this._context.ClearRectAsync(tile.X * 32 - 1, tile.Y * 32 - 1, 32 + 2, 32 + 2));

        drawStack.Push(this._context.SetStrokeStyleAsync(GetColor(GridGray)));
        drawStack.Push(this._context.StrokeRectAsync(tile.X * 32, tile.Y * 32, 32, 32));

        await UpdateGridState();
    }

    private async Task PlayTileAnimation(TileAnimation animation, Vector2 tile)
    {
        playingAnimations++;

        TileKeyframe initialKeyframe = animation.Keyframes[0];
        drawStack.Push(DrawCustomTile(initialKeyframe.Color, tile, initialKeyframe.Size, initialKeyframe.BorderRadius));

        for (int i = 1; i < animation.Keyframes.Length; i++)
        {
            if (animationCancellationToken.Token.IsCancellationRequested)
            {
                break;
            }

            TileKeyframe previousKeyframe = animation.Keyframes[i - 1];
            TileKeyframe keyframe = animation.Keyframes[i];
            for (int ms = 0; ms <= previousKeyframe.DurationMs; ms += 10)
            {
                if (animationCancellationToken.Token.IsCancellationRequested)
                {
                    break;
                }

                Vector4 color = Vector4.Lerp(previousKeyframe.Color, keyframe.Color, ms / (float)previousKeyframe.DurationMs);
                Vector2 size = Vector2.Lerp(previousKeyframe.Size, keyframe.Size, ms / (float)previousKeyframe.DurationMs);
                int borderRadius = 0;

                drawStack.Push(DrawCustomTile(color, tile, size, borderRadius));

                await Task.Delay(10);

                await UpdateGridState();
            }
        }

        TileKeyframe lastFrame = animation.Keyframes[^1];

        drawStack.Push(DrawCustomTile(lastFrame.Color, tile, lastFrame.Size, lastFrame.BorderRadius));
        await UpdateGridState();

        playingAnimations--;
    }

    private async Task DrawCustomTile(Vector4 color, Vector2 position, Vector2 size, int borderRadius)
    {
        Vector2 from = position * 32f + (new Vector2(32, 32) - (new Vector2(size.X, size.Y) * 32f)) / 2f;

        drawStack.Push(this._context.SetFillStyleAsync(GetColor(color)));
        drawStack.Push(this._context.FillRectAsync(from.X, from.Y, size.X * 32, size.Y * 32));

        await UpdateGridState();
    }

    private string GetColor(Vector3 rgb, float a = 1)
    {
        return GetColor(new Vector4(rgb.X, rgb.Y, rgb.Z, a));
    }

    private string GetColor(Vector4 rgba)
    {
        string alphaString = rgba.W.ToString("0.00",CultureInfo.InvariantCulture);
        return $"rgba({(int)rgba.X}, {(int)rgba.Y}, {(int)rgba.Z}, {alphaString})";
    }

    private async Task UpdateGridState(){
        //Console.WriteLine("Update Grid State");

        if (drawStack.Count == 0 || drawCount > 1)
            return;

        drawCount++;

        while(isDrawing)
            await Task.Delay(5);

        //Console.WriteLine("Drawing Stack");
        isDrawing = true;
        while (drawStack.Count > 0)
        {
            await drawStack.Pop();
        }

        isDrawing = false;
        drawCount--;
        //Console.WriteLine("Done Drawing Stack");
    }
}
